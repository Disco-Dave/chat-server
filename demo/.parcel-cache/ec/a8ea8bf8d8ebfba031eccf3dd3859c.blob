// Generated by purs version 0.14.3
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Alternative = function (Applicative0, Plus1) {
  this.Applicative0 = Applicative0;
  this.Plus1 = Plus1;
};
_c = Alternative;
var guard = function (dictAlternative) {
  return function (v) {
    if (v) {
      return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Unit.unit);
    }
    ;
    if (!v) {
      return Control_Plus.empty(dictAlternative.Plus1());
    }
    ;
    throw new Error("Failed pattern match at Control.Alternative (line 48, column 1 - line 48, column 54): " + [v.constructor.name]);
  };
};
var alternativeArray = new Alternative(function () {
  return Control_Applicative.applicativeArray;
}, function () {
  return Control_Plus.plusArray;
});
module.exports = {
  Alternative: Alternative,
  guard: guard,
  alternativeArray: alternativeArray,
  Alt: Control_Alt.Alt,
  alt: Control_Alt.alt,
  Applicative: Control_Applicative.Applicative,
  liftA1: Control_Applicative.liftA1,
  pure: Control_Applicative.pure,
  unless: Control_Applicative.unless,
  when: Control_Applicative.when,
  Apply: Control_Apply.Apply,
  apply: Control_Apply.apply,
  Plus: Control_Plus.Plus,
  empty: Control_Plus.empty,
  Functor: Data_Functor.Functor,
  map: Data_Functor.map,
  "void": Data_Functor["void"]
};
var _c;
$RefreshReg$(_c, "Alternative");
