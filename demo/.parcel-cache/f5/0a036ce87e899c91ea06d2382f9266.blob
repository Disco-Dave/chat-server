// Generated by purs version 0.14.3
"use strict";
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var CommutativeRingRecord = function (RingRecord0) {
  this.RingRecord0 = RingRecord0;
};
_c = CommutativeRingRecord;
var CommutativeRing = function (Ring0) {
  this.Ring0 = Ring0;
};
_c2 = CommutativeRing;
var commutativeRingUnit = new CommutativeRing(function () {
  return Data_Ring.ringUnit;
});
var commutativeRingRecordNil = new CommutativeRingRecord(function () {
  return Data_Ring.ringRecordNil;
});
var commutativeRingRecordCons = function (dictIsSymbol) {
  return function (dictCons) {
    return function (dictCommutativeRingRecord) {
      return function (dictCommutativeRing) {
        return new CommutativeRingRecord(function () {
          return Data_Ring.ringRecordCons(dictIsSymbol)()(dictCommutativeRingRecord.RingRecord0())(dictCommutativeRing.Ring0());
        });
      };
    };
  };
};
var commutativeRingRecord = function (dictRowToList) {
  return function (dictCommutativeRingRecord) {
    return new CommutativeRing(function () {
      return Data_Ring.ringRecord()(dictCommutativeRingRecord.RingRecord0());
    });
  };
};
var commutativeRingProxy3 = new CommutativeRing(function () {
  return Data_Ring.ringProxy3;
});
var commutativeRingProxy2 = new CommutativeRing(function () {
  return Data_Ring.ringProxy2;
});
var commutativeRingProxy = new CommutativeRing(function () {
  return Data_Ring.ringProxy;
});
var commutativeRingNumber = new CommutativeRing(function () {
  return Data_Ring.ringNumber;
});
var commutativeRingInt = new CommutativeRing(function () {
  return Data_Ring.ringInt;
});
var commutativeRingFn = function (dictCommutativeRing) {
  return new CommutativeRing(function () {
    return Data_Ring.ringFn(dictCommutativeRing.Ring0());
  });
};
module.exports = {
  CommutativeRing: CommutativeRing,
  CommutativeRingRecord: CommutativeRingRecord,
  commutativeRingInt: commutativeRingInt,
  commutativeRingNumber: commutativeRingNumber,
  commutativeRingUnit: commutativeRingUnit,
  commutativeRingFn: commutativeRingFn,
  commutativeRingRecord: commutativeRingRecord,
  commutativeRingProxy: commutativeRingProxy,
  commutativeRingProxy2: commutativeRingProxy2,
  commutativeRingProxy3: commutativeRingProxy3,
  commutativeRingRecordNil: commutativeRingRecordNil,
  commutativeRingRecordCons: commutativeRingRecordCons,
  Ring: Data_Ring.Ring,
  RingRecord: Data_Ring.RingRecord,
  Semiring: Data_Semiring.Semiring,
  add: Data_Semiring.add,
  mul: Data_Semiring.mul,
  one: Data_Semiring.one,
  zero: Data_Semiring.zero
};
var _c, _c2;
$RefreshReg$(_c, "CommutativeRingRecord");
$RefreshReg$(_c2, "CommutativeRing");
